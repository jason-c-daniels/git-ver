#!/bin/bash
set -e
get_script_dir () {
     SOURCE="${BASH_SOURCE[0]}"
     # While $SOURCE is a symlink, resolve it
     while [ -h "$SOURCE" ]; do
          DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
          SOURCE="$( readlink "$SOURCE" )"
          # If $SOURCE was a relative symlink (so no "/" as prefix, need to resolve it relative to the symlink base directory
          [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
     done
     DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
     echo "$DIR"
}


GIT_VER_DIR=$(get_script_dir)

if [[ "$1" == "" ]]; then
echo "
usage: git-ver [command] [command arguments]
For more details on the individual commands type git-ver help [command]

List of known commands:
get-major   : Returns the major number from the current semantic version number. (Maj.Min.Patch[-info+metadata])

get-minor   : Returns the minor number from the current semantic version number.

get-patch   : Returns the patch number from the current semantic version number

get-prefix  : Returns the version with a prefix, prefix defaults to 'v'

get-rev     : Counts the number of commits from the last tag and returns that as a revision number. (placed in info as .rev#)

get-semver  : Retrieves a full semantic version, optionally with 

get-suffix  : gets the suffix for a pre-release semantic version. (e.g. -alpha.1)

get-version : Gets the version number in Major.Minor.Patch format

help        : Displays this help information.

"
else

    #( export GIT_VER_VERSION; "GIT_VER_DIR/git-ver-help-$1" 2>&1 /dev/null || { echo >&2 "Cannot find help for command: $1."; exit 1; } )
    if [[ -f "$GIT_VER_DIR/git-ver-help-$1" ]]; then
        ( export GIT_VER_VERSION; "$GIT_VER_DIR/git-ver-help-$1" )
    else 
        echo >&2 "Couldn't find help for: $1."; 
        exit 1; 
    fi;

fi;